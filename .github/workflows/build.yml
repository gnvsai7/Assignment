# on:
#   - pull_request
#   - push

# name: build

# jobs:
#   tests:
#     name: PHP ${{ matrix.php }} - ${{ matrix.os }}

#     env:
#       extensions: dom, json, gd, imagick
#       key: cache-v1

#     runs-on: ${{ matrix.os }}

#     strategy:
#       matrix:
#         os:
#           - ubuntu-latest
#           - windows-latest

#         php:
#           - "7.4"
#           - "8.0"
#           - "8.1"
          
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Setup cache environment
#         id: cache-env
#         uses: shivammathur/cache-extensions@v1
#         with:
#           php-version: ${{ matrix.php }}
#           extensions: ${{ env.extensions }}
#           key: ${{ env.key }}

#       - name: Cache extensions
#         uses: actions/cache@v1
#         with:
#           path: ${{ steps.cache-env.outputs.dir }}
#           key: ${{ steps.cache-env.outputs.key }}
#           restore-keys: ${{ steps.cache-env.outputs.key }}

#       - name: Install PHP with extensions
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: ${{ matrix.php }}
#           extensions: ${{ env.extensions }}
#           ini-values: date.timezone='UTC'
          
#       - name: Determine composer cache directory on Linux
#         if: matrix.os == 'ubuntu-latest'
#         run: |
#             echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV

#       - name: Determine composer cache directory on Windows
#         if: matrix.os == 'windows-latest'
#         run: |
#             echo "COMPOSER_CACHE_DIR=~\AppData\Local\Composer" >> $GITHUB_ENV

#       - name: Cache dependencies installed with composer
#         uses: actions/cache@v1
#         with:
#           path: ${{ steps.cache-env.outputs.dir }}
#           key: php${{ matrix.php }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}
#           restore-keys: |
#             php${{ matrix.php }}-composer-${{ matrix.dependencies }}-

#       - name: Install dependencies with composer php PHP [5.6 - 8.0]
#         run: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi

#       - name: Run tests with codeception
#         run: |
#           sed -i "s/'cookieValidationKey' => ''/'cookieValidationKey' => 'testkey'/" config/web.php
#           php -S 127.0.0.1:8080 -t public > ./runtime/yii.log 2>&1 &
#           vendor/bin/codecept run
#         shell: bash


name: CI/CD Deployment

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: yourdockerhubusername/yii2-app:latest

      - name: Install Ansible
        run: sudo apt install -y ansible

      - name: Save EC2 private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        run: ansible-playbook deploy/playbook.yml -i deploy/inventory.ini
      
      
      - name: SSH into EC2 and Update Docker Swarm Service
        uses: appleboy/ssh-action@master
        with:
          host: 3.21.104.12
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker service update --image ${{ secrets.DOCKER_USERNAME }}/yii2-app:latest yii2_app || \
            docker service create --name yii2_app --network web -p 8000:80 ${{ secrets.DOCKER_USERNAME }}/yii2-app:latest
